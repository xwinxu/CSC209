Script started on Fri 15 Feb 2019 01:55:46 PM EST
]0;xuwinni1@wolf:/h/u15/c7/00/xuwinni1/Desktop/xuwinni1/lab6xuwinni1[36mÎ»[36m~/Desktop/xuwinni1/lab6 [33m:)[37m gdc [K[Kb overflow
GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from overflow...done.
(gdb) break main
Breakpoint 1 at 0x40062e: file overflow.c, line 6.
(gdb) run
Starting program: /h/u15/c7/00/xuwinni1/Desktop/xuwinni1/lab6/overflow 

Breakpoint 1, main () at overflow.c:6
6       int main() {
(gdb) display a
1: a = {0, 0, 0, 0}
(gdb) display after
2: after = {4196608, 0, 4195632, 0}
(gdb) next
7           int index = 0;
1: a = {0, 0, 0, 0}
2: after = {4196608, 0, 4195632, 0}
(gdb) next
9           int before[SIZE] = {10, 10, 10, 10};
1: a = {0, 0, 0, 0}
2: after = {4196608, 0, 4195632, 0}
(gdb) list
4       #define OVERFLOW 5 
5       
6       int main() {
7           int index = 0;
8           int i;
9           int before[SIZE] = {10, 10, 10, 10};
10          int a[SIZE] = {0, 0, 0, 0};
11          int after[SIZE] = {10, 10, 10, 10};
12      
13          printf("Address of the variables:\n");
(gdb) list
14          for (index = 0; index < SIZE; index++) {
15              printf("%lx -> &after[%d]\n", (unsigned long) &after[index], index);
16          }
17          for (index = 0; index < SIZE; index++) {
18              printf("%lx -> &a[%d]\n", (unsigned long) &a[index], index);
19          }
20          for (index = 0; index < SIZE; index++) {
21              printf("%lx -> &before[%d]\n", (unsigned long) &before[index], index);
22          }
23          printf("%lx -> &i\n", (unsigned long)&i);
(gdb) list
24          printf("%lx -> &index\n", (unsigned long)&index);
25          printf("\n");
26      
27      
28          printf("Initial values:\n");
29          printf("i = %d\n", i);
30          printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
31          printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
32          printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
33          printf("\n");
(gdb) list
34      
35      
36          for (i = 0; i < OVERFLOW; i++) {
37              a[i] = i * 10;
38              printf("i = %d\n", i);
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
41              printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
42          }
43      
(gdb) lis[K[K[Kbreak 36
Breakpoint 2 at 0x40082f: file overflow.c, line 36.
(gdb) break 35
Note: breakpoint 2 also set at pc 0x40082f.
Breakpoint 3 at 0x40082f: file overflow.c, line 35.
(gdb) continue
Continuing.
Address of the variables:
7fffffffe9e0 -> &after[0]
7fffffffe9e4 -> &after[1]
7fffffffe9e8 -> &after[2]
7fffffffe9ec -> &after[3]
7fffffffe9d0 -> &a[0]
7fffffffe9d4 -> &a[1]
7fffffffe9d8 -> &a[2]
7fffffffe9dc -> &a[3]
7fffffffe9c0 -> &before[0]
7fffffffe9c4 -> &before[1]
7fffffffe9c8 -> &before[2]
7fffffffe9cc -> &before[3]
7fffffffe9bc -> &i
7fffffffe9b8 -> &index

Initial values:
i = 0
before = {10, 10, 10, 10}
a = {0, 0, 0, 0}
after = {10, 10, 10, 10}


Breakpoint 2, main () at overflow.c:36
36          for (i = 0; i < OVERFLOW; i++) {
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) next
37              a[i] = i * 10;
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) next
38              printf("i = %d\n", i);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) next
i = 0
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) n
before = {10, 10, 10, 10}
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) n
a = {0, 0, 0, 0}
41              printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) n
after = {10, 10, 10, 10}
36          for (i = 0; i < OVERFLOW; i++) {
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) n
37              a[i] = i * 10;
1: a = {0, 0, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) n
38              printf("i = %d\n", i);
1: a = {0, 10, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) n
i = 1
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: a = {0, 10, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) n
before = {10, 10, 10, 10}
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: a = {0, 10, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) n
a = {0, 10, 0, 0}
41              printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: a = {0, 10, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) n
after = {10, 10, 10, 10}
36          for (i = 0; i < OVERFLOW; i++) {
1: a = {0, 10, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) n
37              a[i] = i * 10;
1: a = {0, 10, 0, 0}
2: after = {10, 10, 10, 10}
(gdb) n
38              printf("i = %d\n", i);
1: a = {0, 10, 20, 0}
2: after = {10, 10, 10, 10}
(gdb) n
i = 2
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: a = {0, 10, 20, 0}
2: after = {10, 10, 10, 10}
(gdb) n
before = {10, 10, 10, 10}
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: a = {0, 10, 20, 0}
2: after = {10, 10, 10, 10}
(gdb) n
a = {0, 10, 20, 0}
41              printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: a = {0, 10, 20, 0}
2: after = {10, 10, 10, 10}
(gdb) n
after = {10, 10, 10, 10}
36          for (i = 0; i < OVERFLOW; i++) {
1: a = {0, 10, 20, 0}
2: after = {10, 10, 10, 10}
(gdb) n
37              a[i] = i * 10;
1: a = {0, 10, 20, 0}
2: after = {10, 10, 10, 10}
(gdb) n
38              printf("i = %d\n", i);
1: a = {0, 10, 20, 30}
2: after = {10, 10, 10, 10}
(gdb) n
i = 3
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: a = {0, 10, 20, 30}
2: after = {10, 10, 10, 10}
(gdb) n
before = {10, 10, 10, 10}
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: a = {0, 10, 20, 30}
2: after = {10, 10, 10, 10}
(gdb) n
a = {0, 10, 20, 30}
41              printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: a = {0, 10, 20, 30}
2: after = {10, 10, 10, 10}
(gdb) n
after = {10, 10, 10, 10}
36          for (i = 0; i < OVERFLOW; i++) {
1: a = {0, 10, 20, 30}
2: after = {10, 10, 10, 10}
(gdb) n
37              a[i] = i * 10;
1: a = {0, 10, 20, 30}
2: after = {10, 10, 10, 10}
(gdb) n
38              printf("i = %d\n", i);
1: a = {0, 10, 20, 30}
2: after = {40, 10, 10, 10}
(gdb) print &(after[0])
$1 = (int *) 0x7fffffffe9e0
(gdb) print *a[4]
Cannot access memory at address 0x28
(gdb) print &(a[4])
$2 = (int *) 0x7fffffffe9e0
(gdb) quiqui[K[K[Kt
A debugging session is active.

        Inferior 1 [process 44465] will be killed.

Quit anyway? (y or n) y
]0;xuwinni1@wolf:/h/u15/c7/00/xuwinni1/Desktop/xuwinni1/lab6xuwinni1[36mÎ»[36m~/Desktop/xuwinni1/lab6 [33m:)[37m exit
exit

Script done on Fri 15 Feb 2019 01:59:23 PM EST
